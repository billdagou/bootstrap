lib {
	parseFunc_RTE {
		externalBlocks {
			table {
				stdWrap {
					HTMLparser.tags.table {
						fixAttrib.class >
						fixAttrib.class = table
					}
					wrap = <div class="table-responsive">|</div>
				}
			}
		}
		nonTypoTagStdWrap {
			HTMLparser {
				tags {
					b.remap = strong
					i.remap = em
				}
			}
			encapsLines.addAttributes.P >
		}
	}
	stdheader {
		3.headerClass.cObject {
			10 {
				noTrimWrap = |text-||
			}
			20 >
		}
		5 >
		10 {
			1 {
				postCObject = TEXT
				postCObject {
					field = subheader
					stdWrap {
						noTrimWrap = | <small>|</small>|
						required = 1
					}
				}
			}
			2.postCObject < .1.postCObject
			3.postCObject < .1.postCObject
			4.postCObject < .1.postCObject
			5.postCObject < .1.postCObject
			6 < .1
			6 {
				dataWrap = <h6{register:headerClass}>|</h6>
			}
		}
		20 >
		40 >
		stdWrap.dataWrap >
		stdWrap.dataWrap {
			override = <div class="page-header">|</div>
			if.isTrue.field = bootstrap_page_header
		}
	}
}

tt_content {
	stdWrap {
		innerWrap.cObject {
			default {
				10.cObject.div >
				20 >
			}
			1.20 >
			5.20 >
			6.20 >
			10.20 >
			11.20 >
			12.20 >
			20.20 >
			21.20 >
			66 {
				20 >
				40 >
			}
		}
		innerWrap2 >
		innerWrap2.cObject = COA
		innerWrap2.cObject {
			3 = LOAD_REGISTER
			3 {
				linkToTopClass {
					cObject = TEXT
					cObject {
						field = linkToTop_position
						stdWrap {
							required = 1
							noTrimWrap = | class="text-|"|
						}
					}
				}
			}
			5 = TEXT
			5.value = |
			10 = TEXT
			10 {
				stdWrap {
					typolink {
						parameter.data = TSFE:id
						returnLast = url
					}
					dataWrap = <p{register:linkToTopClass}><a href="|#">{LLL:EXT:css_styled_content/Resources/Private/Language/locallang.xlf:label.toTop}</a></p>
					insertData = 1
					fieldRequired = linkToTop
				}
			}
			98 = RESTORE_REGISTER
		}
	}
	header.20 >
}